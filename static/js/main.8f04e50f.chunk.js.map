{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","width","height","name","email","CardList","robos","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scrollable","style","overflow","border","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobos","filter","robo","toLowerCase","includes","length","Scroll","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,G,MAZF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZ,OACI,yBAAKC,UAAY,oDACb,yBAAKC,IAAG,+BAA2BF,EAAMG,GAAjC,YAAgDC,IAAI,QAAQC,MAAM,MAAMC,OAAO,QACvF,6BACI,4BAAKN,EAAMO,MACX,2BAAIP,EAAMQ,WCOXC,EAZE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACI,6BAEQA,EAAMC,KAAI,SAACC,GACP,OAAO,kBAAC,EAAD,CAAMC,IAAQD,EAAKT,GAAKH,MAASY,SCE7CE,EARG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKd,UAAY,OACb,2BAAOe,KAAK,SAASC,YAAY,gBAAgBhB,UAAY,uCAAuCiB,SAAaH,MCK9GI,EARI,SAACnB,GAChB,OACI,yBAAKoB,MAAO,CAAEC,SAAS,SAAUC,OAAQ,kBAAmBhB,OAAQ,UAC9DN,EAAMuB,WCiDLC,E,kDA5Cb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IAaRyB,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CACXrB,MAAQ,GACRkB,YAAa,IAJC,E,gEAQE,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACjB,MAAM0B,S,+BAO7B,IAAD,EACyBC,KAAKN,MAA5BrB,EADF,EACEA,MAAOkB,EADT,EACSA,YACTU,EAAgB5B,EAAM6B,QAAO,SAAAC,GACjC,OAAOA,EAAKjC,KAAKkC,cAAcC,SAASd,EAAYa,kBAEtD,OAAI/B,EAAMiC,OASN,yBAAK1C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWc,aAAiBsB,KAAKZ,iBACjC,kBAACmB,EAAD,KACA,kBAAC,EAAD,CAAUlC,MAAU4B,MAXtB,6BACE,+C,GA5BQO,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8f04e50f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ props }) => {\r\n    return(\r\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={ `https://robohash.org/${props.id}?200x200` } alt=\"Robos\" width=\"200\" height=\"200\"/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robos }) => {\r\n    return(\r\n        <div>\r\n            {\r\n                robos.map((user)=>{\r\n                    return <Card key = { user.id } props = {user}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input type=\"search\" placeholder=\"Search Robots\" className = 'pa3 ba b--green bg-lightest-blue dib' onChange = { searchChange }/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scrollable = (props) => {\r\n    return (\r\n        <div style={{ overflow:'scroll', border: '2px solid black', height: '800px'}}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scrollable;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll.js'\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      robos : [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({robos:users}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n  \n  render(){\n    const { robos, searchfield } = this.state;\n    const filteredRobos = robos.filter(robo => {\n      return robo.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    if(!robos.length){\n      return (\n        <div>\n          <h1>Loading...</h1>\n        </div>\n      );  \n    }\n    else{\n      return (\n        <div className=\"tc\">\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange = { this.onSearchChange } />\n          <Scroll>\n          <CardList robos = { filteredRobos }/>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}